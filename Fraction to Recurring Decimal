class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        // Check for base conditions
        // If numerator ==0 return "0"
        // if denominator==0 return ""
        // check for the sign => if true then append a negative sign to the string builder
        // append num/den to the string builder
        // check for the remainder if remainder == 0 return the stringbuilder formed so far
        // append "." to the final answer
        // create a Map<Long,Integer>map to store remainder
        // lopp till remainder!=0
        // if map already contains remainder insert "(" and the position of map.get(rem)
        // append ")" then break
        // if not => map.put(rem ,currentlength of stringbuilder)
        // multiply rem *10 append rem/den to string Builder
        // remainder = reminder%den

        if(numerator==0)return "0";
        if(denominator==0)return "";
        
        StringBuilder sb = new StringBuilder();
        if(numerator<0 && denominator>0 || numerator>0 && denominator<0)
            sb.append("-");
        
        long nume = Math.abs((long)numerator);
        long den = Math.abs((long)denominator);
        long rem = nume%den;
        sb.append(nume/den);
        
        if(rem==0)return sb.toString();
        
        sb.append(".");
        Map<Long,Integer>map = new HashMap<>();
        
        while(rem!=0){
            if(map.containsKey(rem)){
                sb.insert(map.get(rem),"(");
                sb.append(")");
                break;
            }
           map.put(rem,sb.length());
           rem*=10;
           sb.append(rem/den);
           rem %= den; 
        }   
        
        return sb.toString();
     }
}
