import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int rows = scn.nextInt();
        int cols = scn.nextInt();
        ArrayList<String> paths = getMazePaths(1, 1, rows, cols);
        System.out.println(paths);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if(sr > dr || sc > dc){
            ArrayList<String> bres = new ArrayList<>();
            return bres;
        } else if(sr == dr && sc == dc) {
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        }

        ArrayList<String> mypaths = new ArrayList<>();
    
        for(int jumps = 1; jumps <= dc - sc; jumps++) {
            ArrayList<String> hpaths = getMazePaths(sr, sc+jumps, dr, dc);

            for(String hpath : hpaths){
                mypaths.add("h" + jumps + hpath);
            }
        }

        for(int jumps = 1; jumps <= dr - sr; jumps++) {
            ArrayList<String> vpaths = getMazePaths(sr + jumps, sc, dr, dc);

            for(String vpath : vpaths){
                mypaths.add("v" + jumps + vpath);
            }
        }

        for(int jumps = 1; jumps <=dc-sc && jumps <= dr-sr; jumps++) {
            ArrayList<String> dpaths = getMazePaths(sr+jumps, sc+jumps, dr, dc);

            for(String dpath : dpaths){
                mypaths.add("d" + jumps + dpath);
            }
        }

        return mypaths;
    }

}
