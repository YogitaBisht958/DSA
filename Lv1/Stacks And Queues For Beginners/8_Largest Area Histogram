import java.io.*;
import java.util.*;

public class Main{  
   private static int[] nseLeft(int[] arr){
      Stack<Integer> st = new Stack<>();
      int[] ans = new int[arr.length];

      for(int i = 0; i < arr.length; i++){
         int val = arr[i];

         while(st.size() > 0 && arr[st.peek()] >= val){
            st.pop();
         }

         if(st.size() > 0){
            ans[i] = st.peek();
         }else{
            ans[i] = -1;
         }

         st.push(i);
      }

      return ans;
   }

   private static int[] nseRight(int[] arr){
      Stack<Integer> st = new Stack<>();
      int[] ans = new int[arr.length];

      for(int i = arr.length - 1; i >= 0; i--){
         int val = arr[i];

         while(st.size() > 0 && arr[st.peek()] >= val){
            st.pop();
         }

         if(st.size() > 0){
            ans[i] = st.peek();
         }else{
            ans[i] = arr.length;
         }

         st.push(i);
      }

      return ans;
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int n = Integer.parseInt(br.readLine());
      int[] arr = new int[n];
      for(int i = 0; i < n; i++){
         arr[i] = Integer.parseInt(br.readLine());
      }

      // code
      int[] rb = nseRight(arr); // right boundary, contains next smaller element on the right
      int[] lb = nseLeft(arr); //left boundary, contains next smaller element on the left

      int maxArea = Integer.MIN_VALUE;
      for(int i = 0; i < arr.length; i++){
         int width = rb[i] - lb[i] - 1;
        // System.out.println(arr[i] + "-> width = " + width + ", lb = " + lb[i] + ", rb = " + rb[i]);
         int area = arr[i] * width;
         maxArea = Math.max(maxArea, area);
      }

      System.out.println(maxArea);
   }
}
